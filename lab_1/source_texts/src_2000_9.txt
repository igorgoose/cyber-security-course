erhaps most important caterers now imagine what your favorite movie wouldve been like had none of these people talked to one another lets say that they all showed up at the studio and started doing their own thing without any coordination of any kind if the director keeps to himself and doesnt say roll em then the cameraperson wouldnt start shooting it probably wouldnt matter anyway because the lead actress would still be in her trailer and the lighting wouldnt work because the gaffer wouldnt have been hired maybe youve seen a movie where it looks like this is what happened this chapter covers declaring beans injecting constructors and setters wiring beans controlling bean creation and destruction exploring springs configuration options but most movies the good ones anyway are the product of thousands of people working together toward the common goal of making a blockbuster film in this respect a great piece of software isnt much different any nontrivial application is made up of several objects that must work together to meet some business goal these objects must be aware of one another and communicate with one another to get their jobs done in an online shopping application for instance an ordermanager component may need to work with a product manager component and a credit card authorization component all of these will likely need to work with a dataaccess component to read from and write to a database but as you saw in chapter the traditional approach to creating associations between application objects via construction or lookup leads to complicated code thats difficult to reuse and unit test at best these objects do more work than they should at worst theyre highly coupled to one another making them hard to reuse and hard to test in spring objects arent responsible for finding or creating the other objects that they need to do their jobs instead the container gives them references to the objects that they collaborate with an order manager component for example